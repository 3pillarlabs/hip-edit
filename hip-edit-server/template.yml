AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    hip-edit-server

    API for Hip Edit

Resources:

  HipEditServerApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Handler: lambda.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          npm_config_messaging_host: activemq
          npm_config_messaging_port: 61613
          npm_config_logger_console_level: debug
          npm_config_messaging_editor_topic_domain: HipEdit.Editor
          npm_config_messaging_user: e2e_producer
          npm_config_messaging_password: password
          npm_config_auth_app_host: app_host
          npm_config_auth_local_enabled: false
          npm_config_auth_google_enabled: true
          npm_config_auth_google_client_id: client_id
          npm_config_auth_google_client_secret: client_secret
          npm_config_auth_google_callback_url: callback_url
          npm_config_auth_agent_login: e2e_consumer
          npm_config_auth_agent_passcode: password
          npm_config_auth_jwt_secret_key: jwt_secret
          npm_config_auth_jwt_issuer: http://auth.3pillarglobal.com
      Events:
        AuthRoot:
          Type: Api
          Properties:
            RestApiId: !Ref HipEditAPI
            Path: /auth
            Method: ANY
        Auth:
          Type: Api
          Properties:
            RestApiId: !Ref HipEditAPI
            Path: /auth/{proxy+}
            Method: ANY
        ApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref HipEditAPI
            Path: /api
            Method: ANY
            Auth:
              Authorizer: HipEditLambdaTokenAuth
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref HipEditAPI
            Path: /api/{proxy+}
            Method: ANY
            Auth:
              Authorizer: HipEditLambdaTokenAuth


  HipEditLambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist-lambda
      Handler: authorizer.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          npm_config_logger_console_level: debug
          npm_config_auth_jwt_secret_key: jwt_secret
          npm_config_auth_jwt_issuer: http://auth.3pillarglobal.com


  HipEditAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: ga
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: /
          LoggingLevel: ERROR
      EndpointConfiguration: EDGE
      Cors:
        AllowOrigin: '*'
      Variables:
        ServerlessExpressLambdaFunctionName: !Ref HipEditServerApiFunction
        LambdaAuthorizerFunctionName: !Ref HipEditLambdaAuthorizerFunction
      Auth:
        Authorizers:
          HipEditLambdaTokenAuth:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt HipEditLambdaAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 3600
      DefinitionBody:
        swagger: 2.0
        info:
          title: HipEditAPI
        basePath: /ga
        schemes:
        - https
        securityDefinitions:
          lambda-authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: oauth2
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri: !Join [ ":", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}", "function:${stageVariables.LambdaAuthorizerFunctionName}/invocations"] ]
              authorizerResultTtlInSeconds: 3600
        paths:
          /auth:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Join [ ":", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}", "function:${stageVariables.ServerlessExpressLambdaFunctionName}/invocations"] ]
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /auth/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri: !Join [ ":", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}", "function:${stageVariables.ServerlessExpressLambdaFunctionName}/invocations"] ]
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /api:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Join [ ":", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}", "function:${stageVariables.ServerlessExpressLambdaFunctionName}/invocations"] ]
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
              - lambda-authorizer: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /api/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri: !Join [ ":", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}", "function:${stageVariables.ServerlessExpressLambdaFunctionName}/invocations"] ]
                httpMethod: POST
                type: aws_proxy
              security:
              - lambda-authorizer: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
        x-amazon-apigateway-binary-media-types:
        - '*/*'
        definitions:
          Empty:
            type: object
            title: Empty Schema


Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for ga stage"
    Value: !Sub "https://${HipEditAPI}.execute-api.${AWS::Region}.amazonaws.com/ga/"

  LambdaArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt HipEditServerApiFunction.Arn
